{% if false then %}
--- @class H3DRasterInternal
local raster = {}
{% else %}
local raster = {}
-- Blitable table used to cache return
local blit_buffer = {}
{% end %}

-- Globals
{%
for _, name in pairs(LAYERS) do
	@insert('local layer_' .. name .. ' = {}\n')
	@insert('local layer_' .. name .. '_write = 0\n')
end
%}

local layers = {
{%
for _, name in pairs(LAYERS) do
	@insert('\t' .. name .. ' = layer_' .. name .. ',\n')
end
%}
}

local TRIANGLES = 0
local H = 1
local W = 1
local TEXTURE = nil
local MISSING_TEXTURE = {
	w = 8,
	h = 8,
	data = {
		0, 185, 0, 185, 0, 185, 0, 185,
		185, 0, 185, 0, 185, 0, 185, 0,
		0, 185, 0, 185, 0, 185, 0, 185,
		185, 0, 185, 0, 185, 0, 185, 0,
		0, 185, 0, 185, 0, 185, 0, 185,
		185, 0, 185, 0, 185, 0, 185, 0,
		0, 185, 0, 185, 0, 185, 0, 185,
		185, 0, 185, 0, 185, 0, 185, 0,
	}
}
local NEAR = 0.01
local USE_FACE_CULLING = false

{%
-- Calculated
local function get_va_attribute_name(attribute, index)
	local result = 'va_' .. attribute.name
	if attribute.count > 1 then
		result = result .. '_' .. ("xyzw"):sub(index, index)
	end
	return result
end
local function get_fa_attribute_name(attribute, index)
	local result = 'fa_' .. attribute.name
	if attribute.count > 1 then
		result = result .. '_' .. ("xyzw"):sub(index, index)
	end
	return result
end

local pos_attr = 'va_' .. POSITION_ATTRIBUTE.name .. '_'

local function textindent(text, tabs)
	local lines = {}
	for s in string.gmatch(text .. "\n", "(.-)\n") do
		table.insert(lines, s)
	end
	local pad = ''
	for i=1,tabs do
		pad = pad .. '\t'
	end
	return pad .. table.concat(lines, '\n' .. pad):gsub('\n[\t]+\n', '\n\n')
end

local function if_greater(variables, gt, callback, indent)
	indent = indent or 1
	local function internal(state, index)
		if index <= #variables then
			state[index] = true
			local a = internal(state, index + 1)
			state[index] = false
			local b = internal(state, index + 1)
			if a ~= '' then
				local result = 'if ' .. variables[index] .. ' > ' .. gt .. ' then\n' .. textindent(a, indent)
				if b ~= '' then
					result = result .. '\nelse\n' .. textindent(b, indent)
				end
				return result .. '\nend'
			elseif b ~= '' then
				return 'if ' .. variables[index] .. ' <= ' .. gt .. ' then\n' .. textindent(b, indent) .. '\nend'
			end
			return ''
		else
			return callback(state)
		end
	end
	local state = {}
	for i = 1, #variables do
		state[i] = false
	end
	return internal(state, 1)
end

local function if_sorted(variables, callback, indent)
	indent = indent or 1
	local function permgen(a, n, states)
		if n == 0 then
			local clone = {}
			for i,v in pairs(a) do
				clone[i] = v
			end
			states[#states + 1] = clone
		else
			for i = 1, n, 1 do
				a[n], a[i] = a[i], a[n]
				permgen(a, n - 1, states)
				a[n], a[i] = a[i], a[n]
			end
		end
	end
	local function internal(matrix, perms)
		if #perms == 0 then
			return ''
		elseif #perms == 1 then
			local state = {}
			for i, v in pairs(perms[1]) do
				state[v] = i
			end
			return callback(state)
		end

		-- Get option with most items
		local a_elm = matrix[1]
		local a_idx = 1
		for i=2,#variables do
			local match = matrix[i]
			if a_elm.count < match.count then
				a_elm = match
				a_idx = i
			end
		end

		local b_idx = nil
		for i=1,#variables do
			if a_elm[i] then
				b_idx = i
				break
			end
		end

		local s_t = {}
		local s_f = {}
		for _, v in pairs(perms) do
			if v[a_idx] < v[b_idx] then
				s_t[#s_t + 1] = v
			else
				s_f[#s_f + 1] = v
			end
		end

		matrix[a_idx][b_idx] = nil
		matrix[a_idx].count = matrix[a_idx].count - 1

		local a = internal(matrix, s_t)
		local b = internal(matrix, s_f)

		matrix[a_idx][b_idx] = true
		matrix[a_idx].count = matrix[a_idx].count + 1

		if a ~= '' then
			if b ~= '' then
				return 'if ' .. variables[a_idx] .. ' >= ' .. variables[b_idx] .. ' then\n' .. textindent(a, indent) .. '\nelse\n' .. textindent(b, indent) .. '\nend' 
			end
			return a
		elseif b ~= '' then
			return b
		end

		return ''
	end

	local matrix = {}
	local a = {}
	for i=1,#variables do
		matrix[i] = {}
		matrix[i].count = #variables - i
		a[i] = i
		for j=i+1,#variables do
			matrix[i][j] = true
		end
	end

	local states = {}
	permgen(a, #variables, states)

	local perms = {}
	for i=1,#states do
		perms[i] = {}
		for j,v in pairs(states[i]) do
			perms[i][v] = j
		end
	end

	return internal(matrix, perms)
end

local function get_used_parameters_sort(allowed, keep_comma)
	allowed = allowed or {}
	keep_comma = keep_comma or false

	local lines = {}
	for _,v in pairs(VERTEX_ATTRIBUTES) do
		local fields = SHADER.used_vertex_attributes[v.name] or 0
		if allowed['position'] and v.position then
			fields = (2 ^ v.count) - 1
		end
		if fields > 0 then
			lines[#lines + 1] = '-- ' .. v.name
			for index=1,v.count do
				if bit32.extract(fields, index - 1) == 1 then
					local element = get_va_attribute_name(v, index)
					lines[#lines + 1] = ', ' .. element .. '{1}, ' .. element .. '{2}, ' .. element .. '{3}'
				end
			end
		end
	end
	for _,v in pairs(FACE_ATTRIBUTES) do
		local fields = SHADER.used_face_attributes[v.name] or 0
		if fields > 0 then
			lines[#lines + 1] = '-- ' .. v.name
			for index=1,v.count do
				if bit32.extract(fields, index - 1) == 1 then
					local element = get_fa_attribute_name(v, index)
					lines[#lines + 1] = ', ' .. element
				end
			end
		end
	end
	local result = table.concat(lines, '\n')
	if not keep_comma then
		result = result:gsub('^(.-),( .*)', '%1 %2')
	end
	return result
end

local function get_used_parameters(allowed, keep_comma)
	return get_used_parameters_sort(allowed, keep_comma)
		:gsub('{1}', '1')
		:gsub('{2}', '2')
		:gsub('{3}', '3')
end

%}

local _math_clamp = function(x, min, max)
	if x < min then return min end
	if x > max then return max end
	return x
end

local function renderTriangleInternal(
	y_min, y_mid, y_max,
	x_min, x_mid, x_max,
	x_sta, x_end

{! textindent(get_used_parameters(nil, true), 1) !}
)
	local _math_floor = math.floor
	local _math_ceil  = math.ceil
	local _math_max   = math.max
	local _math_min   = math.min

{#full_function#}
	TRIANGLES = TRIANGLES + 1
{%
	-- Apply perspective correction on vertex attributes
	if POSITION_ATTRIBUTE.count > 2 and #VERTEX_ATTRIBUTES > 1 then
		local use_z = false
		for _, v in pairs(VERTEX_ATTRIBUTES) do
			local fields = SHADER.used_vertex_attributes[v.name] or 0
			if fields > 0 then
				use_z = true
				break
			end
		end

		if use_z then
			for i=1,3 do
				@insert('\t' .. pos_attr .. 'z' .. i .. ' = 1 / ' .. pos_attr .. 'z' .. i .. '\n')
			end
		end

		for _, v in pairs(VERTEX_ATTRIBUTES) do
			local fields = SHADER.used_vertex_attributes[v.name] or 0
			if fields > 0 then
				if not v.position then
					@insert('\t-- ' .. v.name .. '\n')
					for index=1,v.count do
						if bit32.extract(fields, index - 1) == 1 then
							for i=1,3 do
								local element = get_va_attribute_name(v, index)
								@insert('\t' .. element .. i .. ' = ' .. element .. i .. ' * ' .. pos_attr .. 'z' .. i .. '\n')
							end
						end
					end
				end
				@insert('\n')
			end
		end

		for _, v in pairs(VERTEX_ATTRIBUTES) do
			local fields = SHADER.used_vertex_attributes[v.name] or 0
			if fields > 0 then
				@insert('\t-- ' .. v.name .. '\n')
				for index=1,v.count do
					if bit32.extract(fields, index - 1) == 1 then
						for i=2,3 do
							local element = get_va_attribute_name(v, index)
							@insert('\tlocal in_' .. element .. i .. ' = ' .. element .. i .. ' - ' .. element .. 1 .. '\n')
						end
					end
				end
				@insert('\n')
			end
		end
	end
%}
{% if SHADER.uses_barycentric then %}
	-- Barycentric calculations
	local cyx = x_max - x_min
	local cyy = y_max - y_min
	local czx = x_mid - x_min
	local czy = y_mid - y_min
	local det = 1 / (czx * cyy - cyx * czy)
	cyx = cyx * det
	cyy = cyy * det
	czx = czx * det
	czy = czy * det
{% end %}

	-- Texture
	local tex = TEXTURE or MISSING_TEXTURE
	local tw = tex.w
	local th = tex.h
	local td = tex.data

	local y_d0 = y_mid - y_max
	local y_d1 = y_min - y_mid

	-- y_d0 = y_mid - y_max
	-- TOP TRIANGLE, FLAT BOTTOM
	if y_d0 > 0 then
		local x13_s = (x_sta - x_max) / y_d0
		local x23_s = (x_end - x_max) / y_d0
		local dy0 = _math_ceil(y_max - 0.5)
		local dy1 = dy0 + (0.5 - y_max)

		y_d0     = _math_min(y_d0 - dy1, H - dy0)
		local ys = _math_max(0         , 1 - dy0)
		for yy=ys,y_d0 do
			local xs = (yy + dy1) * x13_s + x_max
			local xe = (yy + dy1) * x23_s + x_max
			local yb = yy + dy0

{#triangle#}
{%
			for name, _ in pairs(SHADER.used_layers) do
				@insert('\t\t\tlocal layer_' .. name .. '_y = layer_' .. name .. '[yb]\n')
			end
%}
{% if SHADER.uses_barycentric then %}
			local yyy = yb - y_min + 0.5
			local yya = yyy * cyx
			local yyb = yyy * czx
{% end %}
			xs = _math_max(xs, 1)
			xe = _math_min(xe, W)
			xs = _math_ceil(xs - 0.5)
			xe = _math_ceil(xe - 0.5) - 1
			for xx=xs,xe do
{% if SHADER.uses_barycentric then %}
				local xxx = xx - x_min + 0.5
				local l_a = xxx * cyy - yya
				local l_b = yyb - xxx * czy
				local depth = 1 / ({!pos_attr!}z1 + in_{!pos_attr!}z2 * l_a + in_{!pos_attr!}z3 * l_b)
{% end %}
{! textindent(FRAG_SHADER, 4) !}
			end
{#triangle#}
		end
	end

	-- y_d1 = y_min - y_mid
	-- BOTTOM TRIANGLE, FLAT TOP
	if y_d1 > 0 then
		local x13_s = (x_min - x_sta) / y_d1
		local x23_s = (x_min - x_end) / y_d1
		local dy0 = _math_ceil(y_mid - 0.5)
		local dy1 = dy0 + (0.5 - y_mid)

		y_d1     = _math_min(y_d1 - dy1, H - dy0)
		local ys = _math_max(0         , 1 - dy0)
		for yy=ys,y_d1 do
			local xs = (yy + dy1) * x13_s + x_sta
			local xe = (yy + dy1) * x23_s + x_end
			local yb = yy + dy0

{#triangle#}
		end
	end
{#full_function#}
end

local function renderTriangle(
{! textindent(get_used_parameters({ position = true }), 1) !}
)
	local half_w = W * 0.5
	local half_h = H * 0.5
	local sx1 = half_w + ({!pos_attr!}x1 * half_w) / {!pos_attr!}z1
	local sx2 = half_w + ({!pos_attr!}x2 * half_w) / {!pos_attr!}z2
	local sx3 = half_w + ({!pos_attr!}x3 * half_w) / {!pos_attr!}z3
	local sy1 = half_h - ({!pos_attr!}y1 * half_h) / {!pos_attr!}z1
	local sy2 = half_h - ({!pos_attr!}y2 * half_h) / {!pos_attr!}z2
	local sy3 = half_h - ({!pos_attr!}y3 * half_h) / {!pos_attr!}z3
	if USE_FACE_CULLING and ((sx2 - sx1) * (sy3 - sy1) - (sx3 - sx1) * (sy2 - sy1)) > 0 then
		return
	end

{!
textindent(if_sorted({ 'sy1', 'sy2', 'sy3' }, function(state)
	local res = ''
	for i,v in pairs(state) do
		if i > 1 then
			res = res .. ','
		end
		res = res .. v
	end

	local out = table.concat({
		'local x_sta = ((sx{1} - sx{3}) / (sy{1} - sy{3})) * (sy{2} - sy{1}) + sx{1}',
		'local x_end = sx{2}',
		'if x_sta > x_end then',
		'	x_sta, x_end = x_end, x_sta',
		'end',
		'renderTriangleInternal(',
		'	sy{1}, sy{2}, sy{3},',
		'	sx{1}, sx{2}, sx{3},',
		'	x_sta, x_end',
			textindent(get_used_parameters_sort(nil, true), 1),
		')'
	}, '\n')

	out = out:gsub('{1}', tostring(state[1]))
			 :gsub('{2}', tostring(state[2]))
			 :gsub('{3}', tostring(state[3]))
	out = '-- {' .. res .. '}\n' .. out
	return out
end), 1)
!}
end

--- Draw geometry with the raster
--- @param geometry number[] the geometry buffer 
--- @param matrix H3DMatrix the rotation matrix
--- @return H3DRasterInternal raster
function raster.drawGeometry(geometry, matrix)
{%
	local face_size = 0
	for _, v in pairs(VERTEX_ATTRIBUTES) do
		face_size = face_size + v.count * 3
	end
	for _, v in pairs(FACE_ATTRIBUTES) do
		face_size = face_size + v.count
	end
%}
	for i=1,#geometry,{!face_size!} do
{%
		local idx = 0
		for _, v in pairs(VERTEX_ATTRIBUTES) do
			local fields = SHADER.used_vertex_attributes[v.name] or 0
			if v.position then
				fields = 2 ^ v.count - 1
			end
			if fields > 0 then
				@insert('\t\t-- ' .. v.name .. '\n')
				for i=1,3 do
					for index=1,v.count do
						if bit32.extract(fields, index - 1) == 1 then
							local element = get_va_attribute_name(v, index)
							local pattern = '\t\tlocal {t}{1} = geometry[i + ' .. (idx + index + (i - 1) * v.count - 1) .. ']\n'
							@insert(pattern:gsub('{t}', element):gsub('{1}', i))
						end
					end
				end
				@insert('\n')
			end
			idx = idx + v.count * 3
		end

		for _, v in pairs(FACE_ATTRIBUTES) do
			local fields = SHADER.used_face_attributes[v.name] or 0
			if fields > 0 then
				@insert('\t\t-- ' .. v.name .. '\n')
				for index=1,v.count do
					if bit32.extract(fields, index - 1) == 1 then
						local element = get_fa_attribute_name(v, index)
						@insert('\t\tlocal ' .. element .. ' = geometry[i + ' .. (idx + index - 1) .. ']' .. '\n')
					end
				end
				@insert('\n')
			end
			idx = idx + v.count
		end

		for _, v in pairs(VERTEX_ATTRIBUTES) do
			local fields = SHADER.used_vertex_attributes[v.name] or 0
			if v.position then
				@insert('\t\t-- Apply matrix to (' .. v.name .. ')\n')
				for i=1,3 do
					local pattern = 'matrix.m0{n} * {a} + matrix.m1{n} * {b} + matrix.m2{n} * {c} + matrix.m3{n}'
					local data_a = {}
					local data_b = {}
					for index=1,v.count do
						data_a[#data_a + 1] = get_va_attribute_name(v, index) .. i
						data_b[#data_b + 1] = pattern
							:gsub('{n}', index - 1)
							:gsub('{a}', get_va_attribute_name(v, 1) .. i)
							:gsub('{b}', get_va_attribute_name(v, 2) .. i)
							:gsub('{c}', get_va_attribute_name(v, 3) .. i)
					end
					@insert('\t\t' .. table.concat(data_a, ', ') .. '\n')
					@insert('\t\t= ' .. table.concat(data_b, '\n\t\t, ') .. '\n')
					
				end
				@insert('\n')
			end
			idx = idx + v.count * 3
		end

%}
{!
textindent(if_greater({ pos_attr .. 'z1', pos_attr .. 'z2', pos_attr .. 'z3' }, 'NEAR', function(state)
	local function delta(t, use_a, use_b, use_c)
		local pattern = '({t}{1} - {t}{{v}}) * m{1}{{v}} + {t}{{v}}'
		local result =
			(use_a ~= nil and pattern:gsub('{v}', use_a) or '{t}{1}') .. ', ' ..
			(use_b ~= nil and pattern:gsub('{v}', use_b) or '{t}{2}') .. ', ' ..
			(use_c ~= nil and pattern:gsub('{v}', use_c) or '{t}{3}')
		return result:gsub('{t}', t)
	end

	local function delta_z(t, use_a, use_b, use_c)
		local result =
			(use_a ~= nil and 'NEAR' or '{t}{1}') .. ', ' ..
			(use_b ~= nil and 'NEAR' or '{t}{2}') .. ', ' ..
			(use_c ~= nil and 'NEAR' or '{t}{3}')
		return result:gsub('{t}', t)
	end

	local function get_variables(a, b, c)
		local lines = {}
		for _,v in pairs(VERTEX_ATTRIBUTES) do
			local fields = SHADER.used_vertex_attributes[v.name] or 0
			if v.position then
				fields = 2 ^ v.count - 1
			end
			if fields > 0 then
				lines[#lines + 1] = '-- ' .. v.name
				for index=1,v.count do
					if bit32.extract(fields, index - 1) == 1 then
						local element = get_va_attribute_name(v, index)
						if v.position and index == 3 then
							lines[#lines + 1] = ', ' .. delta_z(element, a, b, c)
						else
							lines[#lines + 1] = ', ' .. delta(element, a, b, c)
						end
					end
				end
			end
		end
		for _,v in pairs(FACE_ATTRIBUTES) do
			local fields = SHADER.used_face_attributes[v.name] or 0
			if fields > 0 then
				lines[#lines + 1] = '-- ' .. v.name
				for index=1,v.count do
					if bit32.extract(fields, index - 1) == 1 then
						local element = get_fa_attribute_name(v, index)
						lines[#lines + 1] = ', ' .. element
					end
				end
			end
		end

		return table.concat(lines, '\n'):gsub('^(.-),( .*)', '%1 %2')
	end

	local inside = 0
	local i_idx = 0
	local o_idx = 0
	local desc = ''
	for i, v in ipairs(state) do
		if i > 1 then
			desc = desc .. ' '
		end
		desc = desc .. (v and i or '.')
		inside = inside + (v and 1 or 0)
		if v then
			i_idx = i
		else
			o_idx = i
		end
	end

	if inside == 0 then
		return ''
	end

	local s_idx = 1
	local out = ''
	if inside == 1 then
		out = table.concat({
			'-- ' .. desc,
			'local m{1}{2} = (NEAR - {p}z{2}) / ({p}z{1} - {p}z{2})',
			'local m{1}{3} = (NEAR - {p}z{3}) / ({p}z{1} - {p}z{3})',
			'renderTriangle(', textindent(get_variables(nil, 2, 3), 1), ')'
		}, '\n')
		s_idx = i_idx
	elseif inside == 2 then
		out = table.concat({
			'-- ' .. desc,
			'local m{1}{2} = (NEAR - {p}z{2}) / ({p}z{1} - {p}z{2})',
			'local m{1}{3} = (NEAR - {p}z{3}) / ({p}z{1} - {p}z{3})',
			'renderTriangle(', textindent(get_variables(2, nil, nil), 1), ')',
			'renderTriangle(', textindent(get_variables(3, 2, nil), 1), ')'
		}, '\n')
		s_idx = o_idx
	else
		out = table.concat({
			'-- ' .. desc,
			'renderTriangle(', textindent(get_variables(nil, nil, nil), 1), ')'
		}, '\n')
	end

	return out:gsub('{1}', tostring(s_idx))
				:gsub('{2}', tostring(1 + (s_idx + 0) % 3))
				:gsub('{3}', tostring(1 + (s_idx + 1) % 3))
				:gsub('{p}', pos_attr)
end), 2)
!}
	end
	return raster
end

--- Fill the specified layer with a value
--- @param name string the name of the layer
--- @param value number the value to fill with
--- @return H3DRasterInternal raster
function raster.set_layer(name, value)
	local layer = layers[name]
	if layer == nil then
		return raster
	end

	for y=1,H do
		local row = layer[y]
		for x=1,W do
			row[x] = value
		end
	end
	return raster
end

--- Returns the layer with the specified name
--- @param name string the layer name
--- @return number[][]? layer the data of the layer
function raster.get_layer(name)
	return layers[name]
end

--- Update the dimensions of the raster
--- @param width integer the width of the buffer
--- @param height integer the height of the buffer
--- @param blit boolean? if buffers should be blit
--- @return H3DRasterInternal raster
function raster.set_size(width, height, blit)
	if blit == nil then
		blit = true
	end
	W = width * (blit and 2 or 1)
	H = height * (blit and 3 or 1)

	-- Resize 
	for y=1,H do
{%
		for _, name in pairs(LAYERS) do
			@insert('\t\tlayer_' .. name .. '[y] = {}\n')
		end
%}
		for x=1,W do
{%
			for _, name in pairs(LAYERS) do
				@insert('\t\t\tlayer_' .. name .. '[y][x] = 0\n')
			end
%}
		end
	end
	return raster
end

--- Set the near plane of the raster
--- @param near number the near clipping value
--- @return H3DRasterInternal raster
function raster.set_near(near)
	NEAR = near
	return raster
end

--- Change if geometry should be face culled or not
--- @param enable boolean if culling should be enabled or not
--- @return H3DRasterInternal raster
function raster.set_face_culling(enable)
	USE_FACE_CULLING = enable
	return raster
end

--- Change the currently loaded texture
--- @param texture any a texture object
--- @return H3DRasterInternal raster
function raster.set_texture(texture)
	TEXTURE = texture
	return raster
end

local texel_bits = {}
local texel_char = {}

local ic = 0
for i=0,63 do
	local a = i
	local b = bit32.band(bit32.bnot(i), 63)
	if texel_bits[a] == nil and texel_bits[b] == nil then
		texel_bits[a] = ic
		texel_bits[b] = -ic
		texel_char[ic] = string.char(128 + ic)
		ic = ic + 1
	end
end

local EMPTY_TABLE = {}
local function calculateTexelWithColor(x, y, layer)
	local y1 = layer[y    ] or EMPTY_TABLE
	local y2 = layer[y + 1] or EMPTY_TABLE
	local y3 = layer[y + 2] or EMPTY_TABLE

	local p1 = y1[x    ] or 0
	local p2 = y1[x + 1] or 0
	local p3 = y2[x    ] or 0
	local p4 = y2[x + 1] or 0
	local p5 = y3[x    ] or 0
	local p6 = y3[x + 1] or 0

	local freq = {}
	freq[p1] = 1
	freq[p2] = (freq[p2] or 0) + 1
	freq[p3] = (freq[p3] or 0) + 1
	freq[p4] = (freq[p4] or 0) + 1
	freq[p5] = (freq[p5] or 0) + 1
	freq[p6] = (freq[p6] or 0) + 1

	local A, A_C = p1, 0
	local B, B_C = p1, 0
	for color, count in pairs(freq) do
		if count > B_C then
			if count > A_C then
				B = A
				B_C = A_C
				A = color
				A_C = count
			else
				B = color
				B_C = count
			end
		end
	end

	if A == B then
		return A, A, ' '
	end

	local mask = 0
	if p1 == A then mask = mask +  1 end
	if p2 == A then mask = mask +  2 end
	if p3 == A then mask = mask +  4 end
	if p4 == A then mask = mask +  8 end
	if p5 == A then mask = mask + 16 end
	if p6 == A then mask = mask + 32 end

	local v = texel_bits[mask]
	if v < 0 then
		return B, A, texel_char[-v]
	else
		return A, B, texel_char[v]
	end
end

--- Return the current data as a CC blitable image
--- @param layer string the layer you want to write
--- @return table blit_table
function raster.get_blit(layer)
	layer = layers[layer]
	local colors = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }
	for y=1,H do
		-- Only allocate once
		local prev = blit_buffer[y]
		if prev == nil then
			prev = { {}, {}, {} }
			blit_buffer[y] = prev
		end
		local row = prev[1]
		local fg = prev[2]
		local bg = prev[3]

		for i=W+1,#row do
			row[i] = nil
			fg[i] = nil
			bg[i] = nil
		end

		for x=1,W do
			local t_fg, t_bg, t_cc = calculateTexelWithColor(x * 2 - 1, y * 3 - 2, layer)
			t_bg = ((16 + (t_bg % 16)) % 16) + 1
			t_fg = ((16 + (t_fg % 16)) % 16) + 1
			
			row[x] = t_cc
			fg[x] = colors[t_fg]
			bg[x] = colors[t_bg]
		end
	end
	for i=H+1,#blit_buffer do
		blit_buffer[i] = nil
	end
	return blit_buffer
end

function raster.get_raster_info()
	local result = {
		fragment = {
{%
			for _, name in pairs(LAYERS) do
				@insert('\t\t\t' .. name .. ' = layer_' .. name .. '_write,\n')
			end
%}
		},
		triangles = TRIANGLES
	}

	TRIANGLES = 0
{%
	for _, name in pairs(LAYERS) do
		@insert('\tlayer_' .. name .. '_write = 0\n')
	end
%}

	return result
end

return raster
